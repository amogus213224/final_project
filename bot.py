from telebot import TeleBot
from config import API_TOKEN
from config import DATABASE
from logic import *
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

bot = TeleBot(API_TOKEN)
hideBoard = types.ReplyKeyboardRemove() 
def get_data(num):
    
    conn = sqlite3.connect('data.db')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    if num == 0:
        cursor.execute("SELECT question FROM faq WHERE Is_Closed = 0")  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–æ–ª–±–µ—Ü –∏ —Ç–∞–±–ª–∏—Ü—É
        rows = cursor.fetchall()
    elif num == 1:
        cursor.execute("SELECT question FROM faq WHERE Is_Closed > 0")  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–æ–ª–±–µ—Ü –∏ —Ç–∞–±–ª–∏—Ü—É
        rows = cursor.fetchall()
    elif num == 2:
        cursor.execute("SELECT question FROM faq WHERE Is_Closed = 2")  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å—Ç–æ–ª–±–µ—Ü –∏ —Ç–∞–±–ª–∏—Ü—É
        rows = cursor.fetchall()
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫
    data_list = [row[0] for row in rows]  # row[0] - —ç—Ç–æ –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
    conn.close()
    return data_list

def get_answ(text):
    conn = sqlite3.connect('data.db')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    answer = cursor.execute("SELECT answer FROM faq WHERE question = ? and Is_Closed > 0", (text,))
    return answer

@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton("‚ùì –í—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! —Ä–∞–∑ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª —Å—é–¥–∞, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å! –≤—ã–±–µ—Ä–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /question, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!", reply_markup=markup)



@bot.message_handler(commands=['question'])
def handle_question(message):
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å')
        bot.register_next_step_handler(message, question)
def question(message):
        admin = manager2.admin_id()
        question = message.text
        user_id = message.chat.id
        manager2.add_user_answer(user_id,question)
        idi = manager2.get_id(question)
        bot.send_message(admin[0][0], f'–í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username}:\n{question}\nid –≤–æ–ø—Ä–æ—Å–∞: {idi[0][0]}')
        bot.send_message(message.chat.id, f'–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞üïõ\nid –≤–æ–ø—Ä–æ—Å–∞: {idi[0][0]}')


@bot.message_handler(commands=['answer'])
def handle_answer(message):
       admins = manager2.admin_id()
       for i in admins:
              if i[0]==message.chat.id:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    btn = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ üìã")
                    markup.add(btn)
                    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–π–¥–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞',reply_markup=markup)
                    bot.register_next_step_handler(message, answer)
def answer(message):
        ans = message.text
        if ans == '–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ üìã':
                data_list = get_data(0)
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for item in data_list:
                        keyboard.add(types.KeyboardButton(item))
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ".format(message.from_user), reply_markup=keyboard)
                bot.register_next_step_handler(message, answer3)
              
        else:
                closed = manager2.is_closed(ans)
                if int(closed[0][0]) == 0:
                        all_id =  manager2.get_all_id()
                        for i in all_id:
                                if i[0]==int(ans):
                                        quest = manager2.get_question(int(ans))
                                        bot.send_message(message.chat.id, f'–í–æ–ø—Ä–æ—Å #{ans}:\n{quest[0][0]} ')
                                        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å')
                                        bot.register_next_step_handler(message, answer2 , ans = ans)
                else:
                        bot.send_message(message.chat.id, '–ù–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏‚ùå')
def answer2(message,ans):
        ans2 = message.text
        user = manager2.get_user_id(int(ans))
        bot.send_message(user[0][0], f'–ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å id:{ans}\n{ans2}')
        manager2.update_Closed(int(ans))
        manager2.update_answer(ans2,int(ans))
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ')

def answer3(message):
      ans = message.text
      ans = manager2.get_id(ans)
      closed = manager2.is_closed(ans[0][0])
      ans = ans[0][0]
      if int(closed[0][0]) == 0:
            all_id =  manager2.get_all_id()
            for i in all_id:
                  if i[0]==int(ans):
                        quest = manager2.get_question(int(ans))
                        bot.send_message(message.chat.id, f'–í–æ–ø—Ä–æ—Å #{ans}:\n{quest[0][0]} ')
                        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å')
                        bot.register_next_step_handler(message, answer2 , ans = ans)
   


                     
              

       
@bot.message_handler(content_types=['text'])
def func(message):
    data_list = get_data(1)
    if(message.text == "‚ùì –í—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        data_list = get_data(2)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for item in data_list:
            keyboard.add(types.KeyboardButton(item))
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, {0.first_name}! –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π —Å–≤–æ–π".format(message.from_user), reply_markup=keyboard)
    elif message.text in data_list:
        answer = get_answ(message.text)
        bot.send_message(message.chat.id, answer)



if __name__ == '__main__':
     manager2 = Database_Manager(DATABASE)
     bot.polling(none_stop=True)